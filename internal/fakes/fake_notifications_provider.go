// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	notifications "github.com/Jozzo6/casino_loyalty_reward_system/internal/component/notificaitons"
	"github.com/coder/websocket"
	"github.com/google/uuid"
)

type FakeNotificationProvider struct {
	ListenToNotificationsStub        func(context.Context, *websocket.Conn, uuid.UUID) error
	listenToNotificationsMutex       sync.RWMutex
	listenToNotificationsArgsForCall []struct {
		arg1 context.Context
		arg2 *websocket.Conn
		arg3 uuid.UUID
	}
	listenToNotificationsReturns struct {
		result1 error
	}
	listenToNotificationsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotificationProvider) ListenToNotifications(arg1 context.Context, arg2 *websocket.Conn, arg3 uuid.UUID) error {
	fake.listenToNotificationsMutex.Lock()
	ret, specificReturn := fake.listenToNotificationsReturnsOnCall[len(fake.listenToNotificationsArgsForCall)]
	fake.listenToNotificationsArgsForCall = append(fake.listenToNotificationsArgsForCall, struct {
		arg1 context.Context
		arg2 *websocket.Conn
		arg3 uuid.UUID
	}{arg1, arg2, arg3})
	stub := fake.ListenToNotificationsStub
	fakeReturns := fake.listenToNotificationsReturns
	fake.recordInvocation("ListenToNotifications", []interface{}{arg1, arg2, arg3})
	fake.listenToNotificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNotificationProvider) ListenToNotificationsCallCount() int {
	fake.listenToNotificationsMutex.RLock()
	defer fake.listenToNotificationsMutex.RUnlock()
	return len(fake.listenToNotificationsArgsForCall)
}

func (fake *FakeNotificationProvider) ListenToNotificationsCalls(stub func(context.Context, *websocket.Conn, uuid.UUID) error) {
	fake.listenToNotificationsMutex.Lock()
	defer fake.listenToNotificationsMutex.Unlock()
	fake.ListenToNotificationsStub = stub
}

func (fake *FakeNotificationProvider) ListenToNotificationsArgsForCall(i int) (context.Context, *websocket.Conn, uuid.UUID) {
	fake.listenToNotificationsMutex.RLock()
	defer fake.listenToNotificationsMutex.RUnlock()
	argsForCall := fake.listenToNotificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotificationProvider) ListenToNotificationsReturns(result1 error) {
	fake.listenToNotificationsMutex.Lock()
	defer fake.listenToNotificationsMutex.Unlock()
	fake.ListenToNotificationsStub = nil
	fake.listenToNotificationsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationProvider) ListenToNotificationsReturnsOnCall(i int, result1 error) {
	fake.listenToNotificationsMutex.Lock()
	defer fake.listenToNotificationsMutex.Unlock()
	fake.ListenToNotificationsStub = nil
	if fake.listenToNotificationsReturnsOnCall == nil {
		fake.listenToNotificationsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listenToNotificationsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotificationProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listenToNotificationsMutex.RLock()
	defer fake.listenToNotificationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotificationProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ notifications.NotificationProvider = new(FakeNotificationProvider)
