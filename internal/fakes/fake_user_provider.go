// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Jozzo6/casino_loyalty_reward_system/internal/component/users"
	"github.com/Jozzo6/casino_loyalty_reward_system/internal/types"
	"github.com/coder/websocket"
	"github.com/google/uuid"
)

type FakeUserProvider struct {
	AuthStub        func(context.Context, string, string, string) (types.User, error)
	authMutex       sync.RWMutex
	authArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	authReturns struct {
		result1 types.User
		result2 error
	}
	authReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	DeleteUserStub        func(context.Context, uuid.UUID) error
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteUserReturns struct {
		result1 error
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 error
	}
	GetUserStub        func(context.Context, uuid.UUID) (types.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getUserReturns struct {
		result1 types.User
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	GetUsersStub        func(context.Context) ([]types.User, error)
	getUsersMutex       sync.RWMutex
	getUsersArgsForCall []struct {
		arg1 context.Context
	}
	getUsersReturns struct {
		result1 []types.User
		result2 error
	}
	getUsersReturnsOnCall map[int]struct {
		result1 []types.User
		result2 error
	}
	ListenToNotificationsStub        func(context.Context, *websocket.Conn, uuid.UUID) error
	listenToNotificationsMutex       sync.RWMutex
	listenToNotificationsArgsForCall []struct {
		arg1 context.Context
		arg2 *websocket.Conn
		arg3 uuid.UUID
	}
	listenToNotificationsReturns struct {
		result1 error
	}
	listenToNotificationsReturnsOnCall map[int]struct {
		result1 error
	}
	LoginStub        func(context.Context, types.User) (types.User, string, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 context.Context
		arg2 types.User
	}
	loginReturns struct {
		result1 types.User
		result2 string
		result3 error
	}
	loginReturnsOnCall map[int]struct {
		result1 types.User
		result2 string
		result3 error
	}
	RegisterStub        func(context.Context, types.User) (types.User, string, error)
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 context.Context
		arg2 types.User
	}
	registerReturns struct {
		result1 types.User
		result2 string
		result3 error
	}
	registerReturnsOnCall map[int]struct {
		result1 types.User
		result2 string
		result3 error
	}
	UpdateUserStub        func(context.Context, types.User) (types.User, error)
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 types.User
	}
	updateUserReturns struct {
		result1 types.User
		result2 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	UpdateUserBalanceStub        func(context.Context, types.User, float64, types.TransactionType) (types.User, error)
	updateUserBalanceMutex       sync.RWMutex
	updateUserBalanceArgsForCall []struct {
		arg1 context.Context
		arg2 types.User
		arg3 float64
		arg4 types.TransactionType
	}
	updateUserBalanceReturns struct {
		result1 types.User
		result2 error
	}
	updateUserBalanceReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserProvider) Auth(arg1 context.Context, arg2 string, arg3 string, arg4 string) (types.User, error) {
	fake.authMutex.Lock()
	ret, specificReturn := fake.authReturnsOnCall[len(fake.authArgsForCall)]
	fake.authArgsForCall = append(fake.authArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.AuthStub
	fakeReturns := fake.authReturns
	fake.recordInvocation("Auth", []interface{}{arg1, arg2, arg3, arg4})
	fake.authMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserProvider) AuthCallCount() int {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return len(fake.authArgsForCall)
}

func (fake *FakeUserProvider) AuthCalls(stub func(context.Context, string, string, string) (types.User, error)) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = stub
}

func (fake *FakeUserProvider) AuthArgsForCall(i int) (context.Context, string, string, string) {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	argsForCall := fake.authArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeUserProvider) AuthReturns(result1 types.User, result2 error) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	fake.authReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) AuthReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	if fake.authReturnsOnCall == nil {
		fake.authReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.authReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) DeleteUser(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteUserStub
	fakeReturns := fake.deleteUserReturns
	fake.recordInvocation("DeleteUser", []interface{}{arg1, arg2})
	fake.deleteUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserProvider) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeUserProvider) DeleteUserCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeUserProvider) DeleteUserArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserProvider) DeleteUserReturns(result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserProvider) DeleteUserReturnsOnCall(i int, result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserProvider) GetUser(arg1 context.Context, arg2 uuid.UUID) (types.User, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetUserStub
	fakeReturns := fake.getUserReturns
	fake.recordInvocation("GetUser", []interface{}{arg1, arg2})
	fake.getUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserProvider) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeUserProvider) GetUserCalls(stub func(context.Context, uuid.UUID) (types.User, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeUserProvider) GetUserArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserProvider) GetUserReturns(result1 types.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) GetUserReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) GetUsers(arg1 context.Context) ([]types.User, error) {
	fake.getUsersMutex.Lock()
	ret, specificReturn := fake.getUsersReturnsOnCall[len(fake.getUsersArgsForCall)]
	fake.getUsersArgsForCall = append(fake.getUsersArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetUsersStub
	fakeReturns := fake.getUsersReturns
	fake.recordInvocation("GetUsers", []interface{}{arg1})
	fake.getUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserProvider) GetUsersCallCount() int {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	return len(fake.getUsersArgsForCall)
}

func (fake *FakeUserProvider) GetUsersCalls(stub func(context.Context) ([]types.User, error)) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = stub
}

func (fake *FakeUserProvider) GetUsersArgsForCall(i int) context.Context {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	argsForCall := fake.getUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUserProvider) GetUsersReturns(result1 []types.User, result2 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	fake.getUsersReturns = struct {
		result1 []types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) GetUsersReturnsOnCall(i int, result1 []types.User, result2 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	if fake.getUsersReturnsOnCall == nil {
		fake.getUsersReturnsOnCall = make(map[int]struct {
			result1 []types.User
			result2 error
		})
	}
	fake.getUsersReturnsOnCall[i] = struct {
		result1 []types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) ListenToNotifications(arg1 context.Context, arg2 *websocket.Conn, arg3 uuid.UUID) error {
	fake.listenToNotificationsMutex.Lock()
	ret, specificReturn := fake.listenToNotificationsReturnsOnCall[len(fake.listenToNotificationsArgsForCall)]
	fake.listenToNotificationsArgsForCall = append(fake.listenToNotificationsArgsForCall, struct {
		arg1 context.Context
		arg2 *websocket.Conn
		arg3 uuid.UUID
	}{arg1, arg2, arg3})
	stub := fake.ListenToNotificationsStub
	fakeReturns := fake.listenToNotificationsReturns
	fake.recordInvocation("ListenToNotifications", []interface{}{arg1, arg2, arg3})
	fake.listenToNotificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserProvider) ListenToNotificationsCallCount() int {
	fake.listenToNotificationsMutex.RLock()
	defer fake.listenToNotificationsMutex.RUnlock()
	return len(fake.listenToNotificationsArgsForCall)
}

func (fake *FakeUserProvider) ListenToNotificationsCalls(stub func(context.Context, *websocket.Conn, uuid.UUID) error) {
	fake.listenToNotificationsMutex.Lock()
	defer fake.listenToNotificationsMutex.Unlock()
	fake.ListenToNotificationsStub = stub
}

func (fake *FakeUserProvider) ListenToNotificationsArgsForCall(i int) (context.Context, *websocket.Conn, uuid.UUID) {
	fake.listenToNotificationsMutex.RLock()
	defer fake.listenToNotificationsMutex.RUnlock()
	argsForCall := fake.listenToNotificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserProvider) ListenToNotificationsReturns(result1 error) {
	fake.listenToNotificationsMutex.Lock()
	defer fake.listenToNotificationsMutex.Unlock()
	fake.ListenToNotificationsStub = nil
	fake.listenToNotificationsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserProvider) ListenToNotificationsReturnsOnCall(i int, result1 error) {
	fake.listenToNotificationsMutex.Lock()
	defer fake.listenToNotificationsMutex.Unlock()
	fake.ListenToNotificationsStub = nil
	if fake.listenToNotificationsReturnsOnCall == nil {
		fake.listenToNotificationsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listenToNotificationsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserProvider) Login(arg1 context.Context, arg2 types.User) (types.User, string, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 context.Context
		arg2 types.User
	}{arg1, arg2})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1, arg2})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUserProvider) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeUserProvider) LoginCalls(stub func(context.Context, types.User) (types.User, string, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeUserProvider) LoginArgsForCall(i int) (context.Context, types.User) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserProvider) LoginReturns(result1 types.User, result2 string, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 types.User
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserProvider) LoginReturnsOnCall(i int, result1 types.User, result2 string, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 string
			result3 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 types.User
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserProvider) Register(arg1 context.Context, arg2 types.User) (types.User, string, error) {
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 context.Context
		arg2 types.User
	}{arg1, arg2})
	stub := fake.RegisterStub
	fakeReturns := fake.registerReturns
	fake.recordInvocation("Register", []interface{}{arg1, arg2})
	fake.registerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUserProvider) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeUserProvider) RegisterCalls(stub func(context.Context, types.User) (types.User, string, error)) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeUserProvider) RegisterArgsForCall(i int) (context.Context, types.User) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserProvider) RegisterReturns(result1 types.User, result2 string, result3 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 types.User
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserProvider) RegisterReturnsOnCall(i int, result1 types.User, result2 string, result3 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 string
			result3 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 types.User
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserProvider) UpdateUser(arg1 context.Context, arg2 types.User) (types.User, error) {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 types.User
	}{arg1, arg2})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserProvider) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUserProvider) UpdateUserCalls(stub func(context.Context, types.User) (types.User, error)) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUserProvider) UpdateUserArgsForCall(i int) (context.Context, types.User) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserProvider) UpdateUserReturns(result1 types.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) UpdateUserReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) UpdateUserBalance(arg1 context.Context, arg2 types.User, arg3 float64, arg4 types.TransactionType) (types.User, error) {
	fake.updateUserBalanceMutex.Lock()
	ret, specificReturn := fake.updateUserBalanceReturnsOnCall[len(fake.updateUserBalanceArgsForCall)]
	fake.updateUserBalanceArgsForCall = append(fake.updateUserBalanceArgsForCall, struct {
		arg1 context.Context
		arg2 types.User
		arg3 float64
		arg4 types.TransactionType
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateUserBalanceStub
	fakeReturns := fake.updateUserBalanceReturns
	fake.recordInvocation("UpdateUserBalance", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateUserBalanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserProvider) UpdateUserBalanceCallCount() int {
	fake.updateUserBalanceMutex.RLock()
	defer fake.updateUserBalanceMutex.RUnlock()
	return len(fake.updateUserBalanceArgsForCall)
}

func (fake *FakeUserProvider) UpdateUserBalanceCalls(stub func(context.Context, types.User, float64, types.TransactionType) (types.User, error)) {
	fake.updateUserBalanceMutex.Lock()
	defer fake.updateUserBalanceMutex.Unlock()
	fake.UpdateUserBalanceStub = stub
}

func (fake *FakeUserProvider) UpdateUserBalanceArgsForCall(i int) (context.Context, types.User, float64, types.TransactionType) {
	fake.updateUserBalanceMutex.RLock()
	defer fake.updateUserBalanceMutex.RUnlock()
	argsForCall := fake.updateUserBalanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeUserProvider) UpdateUserBalanceReturns(result1 types.User, result2 error) {
	fake.updateUserBalanceMutex.Lock()
	defer fake.updateUserBalanceMutex.Unlock()
	fake.UpdateUserBalanceStub = nil
	fake.updateUserBalanceReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) UpdateUserBalanceReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.updateUserBalanceMutex.Lock()
	defer fake.updateUserBalanceMutex.Unlock()
	fake.UpdateUserBalanceStub = nil
	if fake.updateUserBalanceReturnsOnCall == nil {
		fake.updateUserBalanceReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.updateUserBalanceReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	fake.listenToNotificationsMutex.RLock()
	defer fake.listenToNotificationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	fake.updateUserBalanceMutex.RLock()
	defer fake.updateUserBalanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ users.UserProvider = new(FakeUserProvider)
