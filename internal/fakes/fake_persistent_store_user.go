// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Jozzo6/casino_loyalty_reward_system/internal/store"
	"github.com/Jozzo6/casino_loyalty_reward_system/internal/types"
	"github.com/google/uuid"
)

type FakeUserManager struct {
	GetUsersStub        func(context.Context) ([]types.User, error)
	getUsersMutex       sync.RWMutex
	getUsersArgsForCall []struct {
		arg1 context.Context
	}
	getUsersReturns struct {
		result1 []types.User
		result2 error
	}
	getUsersReturnsOnCall map[int]struct {
		result1 []types.User
		result2 error
	}
	UserBalanceUpdateStub        func(context.Context, uuid.UUID, float64) (types.User, error)
	userBalanceUpdateMutex       sync.RWMutex
	userBalanceUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 float64
	}
	userBalanceUpdateReturns struct {
		result1 types.User
		result2 error
	}
	userBalanceUpdateReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	UserCreateStub        func(context.Context, types.User) (types.User, error)
	userCreateMutex       sync.RWMutex
	userCreateArgsForCall []struct {
		arg1 context.Context
		arg2 types.User
	}
	userCreateReturns struct {
		result1 types.User
		result2 error
	}
	userCreateReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	UserDeleteStub        func(context.Context, uuid.UUID) error
	userDeleteMutex       sync.RWMutex
	userDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	userDeleteReturns struct {
		result1 error
	}
	userDeleteReturnsOnCall map[int]struct {
		result1 error
	}
	UserGetByStub        func(context.Context, types.UserFilter) (types.User, error)
	userGetByMutex       sync.RWMutex
	userGetByArgsForCall []struct {
		arg1 context.Context
		arg2 types.UserFilter
	}
	userGetByReturns struct {
		result1 types.User
		result2 error
	}
	userGetByReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	UserUpdateStub        func(context.Context, types.User) (types.User, error)
	userUpdateMutex       sync.RWMutex
	userUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 types.User
	}
	userUpdateReturns struct {
		result1 types.User
		result2 error
	}
	userUpdateReturnsOnCall map[int]struct {
		result1 types.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserManager) GetUsers(arg1 context.Context) ([]types.User, error) {
	fake.getUsersMutex.Lock()
	ret, specificReturn := fake.getUsersReturnsOnCall[len(fake.getUsersArgsForCall)]
	fake.getUsersArgsForCall = append(fake.getUsersArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetUsersStub
	fakeReturns := fake.getUsersReturns
	fake.recordInvocation("GetUsers", []interface{}{arg1})
	fake.getUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserManager) GetUsersCallCount() int {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	return len(fake.getUsersArgsForCall)
}

func (fake *FakeUserManager) GetUsersCalls(stub func(context.Context) ([]types.User, error)) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = stub
}

func (fake *FakeUserManager) GetUsersArgsForCall(i int) context.Context {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	argsForCall := fake.getUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUserManager) GetUsersReturns(result1 []types.User, result2 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	fake.getUsersReturns = struct {
		result1 []types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) GetUsersReturnsOnCall(i int, result1 []types.User, result2 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	if fake.getUsersReturnsOnCall == nil {
		fake.getUsersReturnsOnCall = make(map[int]struct {
			result1 []types.User
			result2 error
		})
	}
	fake.getUsersReturnsOnCall[i] = struct {
		result1 []types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserBalanceUpdate(arg1 context.Context, arg2 uuid.UUID, arg3 float64) (types.User, error) {
	fake.userBalanceUpdateMutex.Lock()
	ret, specificReturn := fake.userBalanceUpdateReturnsOnCall[len(fake.userBalanceUpdateArgsForCall)]
	fake.userBalanceUpdateArgsForCall = append(fake.userBalanceUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 float64
	}{arg1, arg2, arg3})
	stub := fake.UserBalanceUpdateStub
	fakeReturns := fake.userBalanceUpdateReturns
	fake.recordInvocation("UserBalanceUpdate", []interface{}{arg1, arg2, arg3})
	fake.userBalanceUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserManager) UserBalanceUpdateCallCount() int {
	fake.userBalanceUpdateMutex.RLock()
	defer fake.userBalanceUpdateMutex.RUnlock()
	return len(fake.userBalanceUpdateArgsForCall)
}

func (fake *FakeUserManager) UserBalanceUpdateCalls(stub func(context.Context, uuid.UUID, float64) (types.User, error)) {
	fake.userBalanceUpdateMutex.Lock()
	defer fake.userBalanceUpdateMutex.Unlock()
	fake.UserBalanceUpdateStub = stub
}

func (fake *FakeUserManager) UserBalanceUpdateArgsForCall(i int) (context.Context, uuid.UUID, float64) {
	fake.userBalanceUpdateMutex.RLock()
	defer fake.userBalanceUpdateMutex.RUnlock()
	argsForCall := fake.userBalanceUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserManager) UserBalanceUpdateReturns(result1 types.User, result2 error) {
	fake.userBalanceUpdateMutex.Lock()
	defer fake.userBalanceUpdateMutex.Unlock()
	fake.UserBalanceUpdateStub = nil
	fake.userBalanceUpdateReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserBalanceUpdateReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.userBalanceUpdateMutex.Lock()
	defer fake.userBalanceUpdateMutex.Unlock()
	fake.UserBalanceUpdateStub = nil
	if fake.userBalanceUpdateReturnsOnCall == nil {
		fake.userBalanceUpdateReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.userBalanceUpdateReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserCreate(arg1 context.Context, arg2 types.User) (types.User, error) {
	fake.userCreateMutex.Lock()
	ret, specificReturn := fake.userCreateReturnsOnCall[len(fake.userCreateArgsForCall)]
	fake.userCreateArgsForCall = append(fake.userCreateArgsForCall, struct {
		arg1 context.Context
		arg2 types.User
	}{arg1, arg2})
	stub := fake.UserCreateStub
	fakeReturns := fake.userCreateReturns
	fake.recordInvocation("UserCreate", []interface{}{arg1, arg2})
	fake.userCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserManager) UserCreateCallCount() int {
	fake.userCreateMutex.RLock()
	defer fake.userCreateMutex.RUnlock()
	return len(fake.userCreateArgsForCall)
}

func (fake *FakeUserManager) UserCreateCalls(stub func(context.Context, types.User) (types.User, error)) {
	fake.userCreateMutex.Lock()
	defer fake.userCreateMutex.Unlock()
	fake.UserCreateStub = stub
}

func (fake *FakeUserManager) UserCreateArgsForCall(i int) (context.Context, types.User) {
	fake.userCreateMutex.RLock()
	defer fake.userCreateMutex.RUnlock()
	argsForCall := fake.userCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserManager) UserCreateReturns(result1 types.User, result2 error) {
	fake.userCreateMutex.Lock()
	defer fake.userCreateMutex.Unlock()
	fake.UserCreateStub = nil
	fake.userCreateReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserCreateReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.userCreateMutex.Lock()
	defer fake.userCreateMutex.Unlock()
	fake.UserCreateStub = nil
	if fake.userCreateReturnsOnCall == nil {
		fake.userCreateReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.userCreateReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserDelete(arg1 context.Context, arg2 uuid.UUID) error {
	fake.userDeleteMutex.Lock()
	ret, specificReturn := fake.userDeleteReturnsOnCall[len(fake.userDeleteArgsForCall)]
	fake.userDeleteArgsForCall = append(fake.userDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.UserDeleteStub
	fakeReturns := fake.userDeleteReturns
	fake.recordInvocation("UserDelete", []interface{}{arg1, arg2})
	fake.userDeleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserManager) UserDeleteCallCount() int {
	fake.userDeleteMutex.RLock()
	defer fake.userDeleteMutex.RUnlock()
	return len(fake.userDeleteArgsForCall)
}

func (fake *FakeUserManager) UserDeleteCalls(stub func(context.Context, uuid.UUID) error) {
	fake.userDeleteMutex.Lock()
	defer fake.userDeleteMutex.Unlock()
	fake.UserDeleteStub = stub
}

func (fake *FakeUserManager) UserDeleteArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.userDeleteMutex.RLock()
	defer fake.userDeleteMutex.RUnlock()
	argsForCall := fake.userDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserManager) UserDeleteReturns(result1 error) {
	fake.userDeleteMutex.Lock()
	defer fake.userDeleteMutex.Unlock()
	fake.UserDeleteStub = nil
	fake.userDeleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserManager) UserDeleteReturnsOnCall(i int, result1 error) {
	fake.userDeleteMutex.Lock()
	defer fake.userDeleteMutex.Unlock()
	fake.UserDeleteStub = nil
	if fake.userDeleteReturnsOnCall == nil {
		fake.userDeleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.userDeleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserManager) UserGetBy(arg1 context.Context, arg2 types.UserFilter) (types.User, error) {
	fake.userGetByMutex.Lock()
	ret, specificReturn := fake.userGetByReturnsOnCall[len(fake.userGetByArgsForCall)]
	fake.userGetByArgsForCall = append(fake.userGetByArgsForCall, struct {
		arg1 context.Context
		arg2 types.UserFilter
	}{arg1, arg2})
	stub := fake.UserGetByStub
	fakeReturns := fake.userGetByReturns
	fake.recordInvocation("UserGetBy", []interface{}{arg1, arg2})
	fake.userGetByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserManager) UserGetByCallCount() int {
	fake.userGetByMutex.RLock()
	defer fake.userGetByMutex.RUnlock()
	return len(fake.userGetByArgsForCall)
}

func (fake *FakeUserManager) UserGetByCalls(stub func(context.Context, types.UserFilter) (types.User, error)) {
	fake.userGetByMutex.Lock()
	defer fake.userGetByMutex.Unlock()
	fake.UserGetByStub = stub
}

func (fake *FakeUserManager) UserGetByArgsForCall(i int) (context.Context, types.UserFilter) {
	fake.userGetByMutex.RLock()
	defer fake.userGetByMutex.RUnlock()
	argsForCall := fake.userGetByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserManager) UserGetByReturns(result1 types.User, result2 error) {
	fake.userGetByMutex.Lock()
	defer fake.userGetByMutex.Unlock()
	fake.UserGetByStub = nil
	fake.userGetByReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserGetByReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.userGetByMutex.Lock()
	defer fake.userGetByMutex.Unlock()
	fake.UserGetByStub = nil
	if fake.userGetByReturnsOnCall == nil {
		fake.userGetByReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.userGetByReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserUpdate(arg1 context.Context, arg2 types.User) (types.User, error) {
	fake.userUpdateMutex.Lock()
	ret, specificReturn := fake.userUpdateReturnsOnCall[len(fake.userUpdateArgsForCall)]
	fake.userUpdateArgsForCall = append(fake.userUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 types.User
	}{arg1, arg2})
	stub := fake.UserUpdateStub
	fakeReturns := fake.userUpdateReturns
	fake.recordInvocation("UserUpdate", []interface{}{arg1, arg2})
	fake.userUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserManager) UserUpdateCallCount() int {
	fake.userUpdateMutex.RLock()
	defer fake.userUpdateMutex.RUnlock()
	return len(fake.userUpdateArgsForCall)
}

func (fake *FakeUserManager) UserUpdateCalls(stub func(context.Context, types.User) (types.User, error)) {
	fake.userUpdateMutex.Lock()
	defer fake.userUpdateMutex.Unlock()
	fake.UserUpdateStub = stub
}

func (fake *FakeUserManager) UserUpdateArgsForCall(i int) (context.Context, types.User) {
	fake.userUpdateMutex.RLock()
	defer fake.userUpdateMutex.RUnlock()
	argsForCall := fake.userUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserManager) UserUpdateReturns(result1 types.User, result2 error) {
	fake.userUpdateMutex.Lock()
	defer fake.userUpdateMutex.Unlock()
	fake.UserUpdateStub = nil
	fake.userUpdateReturns = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) UserUpdateReturnsOnCall(i int, result1 types.User, result2 error) {
	fake.userUpdateMutex.Lock()
	defer fake.userUpdateMutex.Unlock()
	fake.UserUpdateStub = nil
	if fake.userUpdateReturnsOnCall == nil {
		fake.userUpdateReturnsOnCall = make(map[int]struct {
			result1 types.User
			result2 error
		})
	}
	fake.userUpdateReturnsOnCall[i] = struct {
		result1 types.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	fake.userBalanceUpdateMutex.RLock()
	defer fake.userBalanceUpdateMutex.RUnlock()
	fake.userCreateMutex.RLock()
	defer fake.userCreateMutex.RUnlock()
	fake.userDeleteMutex.RLock()
	defer fake.userDeleteMutex.RUnlock()
	fake.userGetByMutex.RLock()
	defer fake.userGetByMutex.RUnlock()
	fake.userUpdateMutex.RLock()
	defer fake.userUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.UserManager = new(FakeUserManager)
