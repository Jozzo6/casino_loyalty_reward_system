// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Jozzo6/casino_loyalty_reward_system/internal/store"
)

type FakeTx struct {
	CommitTxStub        func(context.Context) error
	commitTxMutex       sync.RWMutex
	commitTxArgsForCall []struct {
		arg1 context.Context
	}
	commitTxReturns struct {
		result1 error
	}
	commitTxReturnsOnCall map[int]struct {
		result1 error
	}
	RollbackTxStub        func(context.Context) error
	rollbackTxMutex       sync.RWMutex
	rollbackTxArgsForCall []struct {
		arg1 context.Context
	}
	rollbackTxReturns struct {
		result1 error
	}
	rollbackTxReturnsOnCall map[int]struct {
		result1 error
	}
	WithTxStub        func(context.Context) (store.Persistent, error)
	withTxMutex       sync.RWMutex
	withTxArgsForCall []struct {
		arg1 context.Context
	}
	withTxReturns struct {
		result1 store.Persistent
		result2 error
	}
	withTxReturnsOnCall map[int]struct {
		result1 store.Persistent
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTx) CommitTx(arg1 context.Context) error {
	fake.commitTxMutex.Lock()
	ret, specificReturn := fake.commitTxReturnsOnCall[len(fake.commitTxArgsForCall)]
	fake.commitTxArgsForCall = append(fake.commitTxArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CommitTxStub
	fakeReturns := fake.commitTxReturns
	fake.recordInvocation("CommitTx", []interface{}{arg1})
	fake.commitTxMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTx) CommitTxCallCount() int {
	fake.commitTxMutex.RLock()
	defer fake.commitTxMutex.RUnlock()
	return len(fake.commitTxArgsForCall)
}

func (fake *FakeTx) CommitTxCalls(stub func(context.Context) error) {
	fake.commitTxMutex.Lock()
	defer fake.commitTxMutex.Unlock()
	fake.CommitTxStub = stub
}

func (fake *FakeTx) CommitTxArgsForCall(i int) context.Context {
	fake.commitTxMutex.RLock()
	defer fake.commitTxMutex.RUnlock()
	argsForCall := fake.commitTxArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTx) CommitTxReturns(result1 error) {
	fake.commitTxMutex.Lock()
	defer fake.commitTxMutex.Unlock()
	fake.CommitTxStub = nil
	fake.commitTxReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTx) CommitTxReturnsOnCall(i int, result1 error) {
	fake.commitTxMutex.Lock()
	defer fake.commitTxMutex.Unlock()
	fake.CommitTxStub = nil
	if fake.commitTxReturnsOnCall == nil {
		fake.commitTxReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitTxReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTx) RollbackTx(arg1 context.Context) error {
	fake.rollbackTxMutex.Lock()
	ret, specificReturn := fake.rollbackTxReturnsOnCall[len(fake.rollbackTxArgsForCall)]
	fake.rollbackTxArgsForCall = append(fake.rollbackTxArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.RollbackTxStub
	fakeReturns := fake.rollbackTxReturns
	fake.recordInvocation("RollbackTx", []interface{}{arg1})
	fake.rollbackTxMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTx) RollbackTxCallCount() int {
	fake.rollbackTxMutex.RLock()
	defer fake.rollbackTxMutex.RUnlock()
	return len(fake.rollbackTxArgsForCall)
}

func (fake *FakeTx) RollbackTxCalls(stub func(context.Context) error) {
	fake.rollbackTxMutex.Lock()
	defer fake.rollbackTxMutex.Unlock()
	fake.RollbackTxStub = stub
}

func (fake *FakeTx) RollbackTxArgsForCall(i int) context.Context {
	fake.rollbackTxMutex.RLock()
	defer fake.rollbackTxMutex.RUnlock()
	argsForCall := fake.rollbackTxArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTx) RollbackTxReturns(result1 error) {
	fake.rollbackTxMutex.Lock()
	defer fake.rollbackTxMutex.Unlock()
	fake.RollbackTxStub = nil
	fake.rollbackTxReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTx) RollbackTxReturnsOnCall(i int, result1 error) {
	fake.rollbackTxMutex.Lock()
	defer fake.rollbackTxMutex.Unlock()
	fake.RollbackTxStub = nil
	if fake.rollbackTxReturnsOnCall == nil {
		fake.rollbackTxReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rollbackTxReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTx) WithTx(arg1 context.Context) (store.Persistent, error) {
	fake.withTxMutex.Lock()
	ret, specificReturn := fake.withTxReturnsOnCall[len(fake.withTxArgsForCall)]
	fake.withTxArgsForCall = append(fake.withTxArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.WithTxStub
	fakeReturns := fake.withTxReturns
	fake.recordInvocation("WithTx", []interface{}{arg1})
	fake.withTxMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTx) WithTxCallCount() int {
	fake.withTxMutex.RLock()
	defer fake.withTxMutex.RUnlock()
	return len(fake.withTxArgsForCall)
}

func (fake *FakeTx) WithTxCalls(stub func(context.Context) (store.Persistent, error)) {
	fake.withTxMutex.Lock()
	defer fake.withTxMutex.Unlock()
	fake.WithTxStub = stub
}

func (fake *FakeTx) WithTxArgsForCall(i int) context.Context {
	fake.withTxMutex.RLock()
	defer fake.withTxMutex.RUnlock()
	argsForCall := fake.withTxArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTx) WithTxReturns(result1 store.Persistent, result2 error) {
	fake.withTxMutex.Lock()
	defer fake.withTxMutex.Unlock()
	fake.WithTxStub = nil
	fake.withTxReturns = struct {
		result1 store.Persistent
		result2 error
	}{result1, result2}
}

func (fake *FakeTx) WithTxReturnsOnCall(i int, result1 store.Persistent, result2 error) {
	fake.withTxMutex.Lock()
	defer fake.withTxMutex.Unlock()
	fake.WithTxStub = nil
	if fake.withTxReturnsOnCall == nil {
		fake.withTxReturnsOnCall = make(map[int]struct {
			result1 store.Persistent
			result2 error
		})
	}
	fake.withTxReturnsOnCall[i] = struct {
		result1 store.Persistent
		result2 error
	}{result1, result2}
}

func (fake *FakeTx) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commitTxMutex.RLock()
	defer fake.commitTxMutex.RUnlock()
	fake.rollbackTxMutex.RLock()
	defer fake.rollbackTxMutex.RUnlock()
	fake.withTxMutex.RLock()
	defer fake.withTxMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTx) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.Tx = new(FakeTx)
