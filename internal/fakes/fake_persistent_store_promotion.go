// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/Jozzo6/casino_loyalty_reward_system/internal/store"
	"github.com/Jozzo6/casino_loyalty_reward_system/internal/types"
	"github.com/google/uuid"
)

type FakePromotionManager struct {
	GetPromotionsStub        func(context.Context) ([]types.Promotion, error)
	getPromotionsMutex       sync.RWMutex
	getPromotionsArgsForCall []struct {
		arg1 context.Context
	}
	getPromotionsReturns struct {
		result1 []types.Promotion
		result2 error
	}
	getPromotionsReturnsOnCall map[int]struct {
		result1 []types.Promotion
		result2 error
	}
	PromotionCreateStub        func(context.Context, types.Promotion) (types.Promotion, error)
	promotionCreateMutex       sync.RWMutex
	promotionCreateArgsForCall []struct {
		arg1 context.Context
		arg2 types.Promotion
	}
	promotionCreateReturns struct {
		result1 types.Promotion
		result2 error
	}
	promotionCreateReturnsOnCall map[int]struct {
		result1 types.Promotion
		result2 error
	}
	PromotionDeleteStub        func(context.Context, uuid.UUID) error
	promotionDeleteMutex       sync.RWMutex
	promotionDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	promotionDeleteReturns struct {
		result1 error
	}
	promotionDeleteReturnsOnCall map[int]struct {
		result1 error
	}
	PromotionGetByIDStub        func(context.Context, uuid.UUID) (types.Promotion, error)
	promotionGetByIDMutex       sync.RWMutex
	promotionGetByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	promotionGetByIDReturns struct {
		result1 types.Promotion
		result2 error
	}
	promotionGetByIDReturnsOnCall map[int]struct {
		result1 types.Promotion
		result2 error
	}
	PromotionGetByTypeStub        func(context.Context, types.PromotionType) (types.Promotion, error)
	promotionGetByTypeMutex       sync.RWMutex
	promotionGetByTypeArgsForCall []struct {
		arg1 context.Context
		arg2 types.PromotionType
	}
	promotionGetByTypeReturns struct {
		result1 types.Promotion
		result2 error
	}
	promotionGetByTypeReturnsOnCall map[int]struct {
		result1 types.Promotion
		result2 error
	}
	PromotionUpdateStub        func(context.Context, types.Promotion) (types.Promotion, error)
	promotionUpdateMutex       sync.RWMutex
	promotionUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 types.Promotion
	}
	promotionUpdateReturns struct {
		result1 types.Promotion
		result2 error
	}
	promotionUpdateReturnsOnCall map[int]struct {
		result1 types.Promotion
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePromotionManager) GetPromotions(arg1 context.Context) ([]types.Promotion, error) {
	fake.getPromotionsMutex.Lock()
	ret, specificReturn := fake.getPromotionsReturnsOnCall[len(fake.getPromotionsArgsForCall)]
	fake.getPromotionsArgsForCall = append(fake.getPromotionsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetPromotionsStub
	fakeReturns := fake.getPromotionsReturns
	fake.recordInvocation("GetPromotions", []interface{}{arg1})
	fake.getPromotionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePromotionManager) GetPromotionsCallCount() int {
	fake.getPromotionsMutex.RLock()
	defer fake.getPromotionsMutex.RUnlock()
	return len(fake.getPromotionsArgsForCall)
}

func (fake *FakePromotionManager) GetPromotionsCalls(stub func(context.Context) ([]types.Promotion, error)) {
	fake.getPromotionsMutex.Lock()
	defer fake.getPromotionsMutex.Unlock()
	fake.GetPromotionsStub = stub
}

func (fake *FakePromotionManager) GetPromotionsArgsForCall(i int) context.Context {
	fake.getPromotionsMutex.RLock()
	defer fake.getPromotionsMutex.RUnlock()
	argsForCall := fake.getPromotionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePromotionManager) GetPromotionsReturns(result1 []types.Promotion, result2 error) {
	fake.getPromotionsMutex.Lock()
	defer fake.getPromotionsMutex.Unlock()
	fake.GetPromotionsStub = nil
	fake.getPromotionsReturns = struct {
		result1 []types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) GetPromotionsReturnsOnCall(i int, result1 []types.Promotion, result2 error) {
	fake.getPromotionsMutex.Lock()
	defer fake.getPromotionsMutex.Unlock()
	fake.GetPromotionsStub = nil
	if fake.getPromotionsReturnsOnCall == nil {
		fake.getPromotionsReturnsOnCall = make(map[int]struct {
			result1 []types.Promotion
			result2 error
		})
	}
	fake.getPromotionsReturnsOnCall[i] = struct {
		result1 []types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionCreate(arg1 context.Context, arg2 types.Promotion) (types.Promotion, error) {
	fake.promotionCreateMutex.Lock()
	ret, specificReturn := fake.promotionCreateReturnsOnCall[len(fake.promotionCreateArgsForCall)]
	fake.promotionCreateArgsForCall = append(fake.promotionCreateArgsForCall, struct {
		arg1 context.Context
		arg2 types.Promotion
	}{arg1, arg2})
	stub := fake.PromotionCreateStub
	fakeReturns := fake.promotionCreateReturns
	fake.recordInvocation("PromotionCreate", []interface{}{arg1, arg2})
	fake.promotionCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePromotionManager) PromotionCreateCallCount() int {
	fake.promotionCreateMutex.RLock()
	defer fake.promotionCreateMutex.RUnlock()
	return len(fake.promotionCreateArgsForCall)
}

func (fake *FakePromotionManager) PromotionCreateCalls(stub func(context.Context, types.Promotion) (types.Promotion, error)) {
	fake.promotionCreateMutex.Lock()
	defer fake.promotionCreateMutex.Unlock()
	fake.PromotionCreateStub = stub
}

func (fake *FakePromotionManager) PromotionCreateArgsForCall(i int) (context.Context, types.Promotion) {
	fake.promotionCreateMutex.RLock()
	defer fake.promotionCreateMutex.RUnlock()
	argsForCall := fake.promotionCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePromotionManager) PromotionCreateReturns(result1 types.Promotion, result2 error) {
	fake.promotionCreateMutex.Lock()
	defer fake.promotionCreateMutex.Unlock()
	fake.PromotionCreateStub = nil
	fake.promotionCreateReturns = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionCreateReturnsOnCall(i int, result1 types.Promotion, result2 error) {
	fake.promotionCreateMutex.Lock()
	defer fake.promotionCreateMutex.Unlock()
	fake.PromotionCreateStub = nil
	if fake.promotionCreateReturnsOnCall == nil {
		fake.promotionCreateReturnsOnCall = make(map[int]struct {
			result1 types.Promotion
			result2 error
		})
	}
	fake.promotionCreateReturnsOnCall[i] = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionDelete(arg1 context.Context, arg2 uuid.UUID) error {
	fake.promotionDeleteMutex.Lock()
	ret, specificReturn := fake.promotionDeleteReturnsOnCall[len(fake.promotionDeleteArgsForCall)]
	fake.promotionDeleteArgsForCall = append(fake.promotionDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.PromotionDeleteStub
	fakeReturns := fake.promotionDeleteReturns
	fake.recordInvocation("PromotionDelete", []interface{}{arg1, arg2})
	fake.promotionDeleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePromotionManager) PromotionDeleteCallCount() int {
	fake.promotionDeleteMutex.RLock()
	defer fake.promotionDeleteMutex.RUnlock()
	return len(fake.promotionDeleteArgsForCall)
}

func (fake *FakePromotionManager) PromotionDeleteCalls(stub func(context.Context, uuid.UUID) error) {
	fake.promotionDeleteMutex.Lock()
	defer fake.promotionDeleteMutex.Unlock()
	fake.PromotionDeleteStub = stub
}

func (fake *FakePromotionManager) PromotionDeleteArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.promotionDeleteMutex.RLock()
	defer fake.promotionDeleteMutex.RUnlock()
	argsForCall := fake.promotionDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePromotionManager) PromotionDeleteReturns(result1 error) {
	fake.promotionDeleteMutex.Lock()
	defer fake.promotionDeleteMutex.Unlock()
	fake.PromotionDeleteStub = nil
	fake.promotionDeleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePromotionManager) PromotionDeleteReturnsOnCall(i int, result1 error) {
	fake.promotionDeleteMutex.Lock()
	defer fake.promotionDeleteMutex.Unlock()
	fake.PromotionDeleteStub = nil
	if fake.promotionDeleteReturnsOnCall == nil {
		fake.promotionDeleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.promotionDeleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePromotionManager) PromotionGetByID(arg1 context.Context, arg2 uuid.UUID) (types.Promotion, error) {
	fake.promotionGetByIDMutex.Lock()
	ret, specificReturn := fake.promotionGetByIDReturnsOnCall[len(fake.promotionGetByIDArgsForCall)]
	fake.promotionGetByIDArgsForCall = append(fake.promotionGetByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.PromotionGetByIDStub
	fakeReturns := fake.promotionGetByIDReturns
	fake.recordInvocation("PromotionGetByID", []interface{}{arg1, arg2})
	fake.promotionGetByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePromotionManager) PromotionGetByIDCallCount() int {
	fake.promotionGetByIDMutex.RLock()
	defer fake.promotionGetByIDMutex.RUnlock()
	return len(fake.promotionGetByIDArgsForCall)
}

func (fake *FakePromotionManager) PromotionGetByIDCalls(stub func(context.Context, uuid.UUID) (types.Promotion, error)) {
	fake.promotionGetByIDMutex.Lock()
	defer fake.promotionGetByIDMutex.Unlock()
	fake.PromotionGetByIDStub = stub
}

func (fake *FakePromotionManager) PromotionGetByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.promotionGetByIDMutex.RLock()
	defer fake.promotionGetByIDMutex.RUnlock()
	argsForCall := fake.promotionGetByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePromotionManager) PromotionGetByIDReturns(result1 types.Promotion, result2 error) {
	fake.promotionGetByIDMutex.Lock()
	defer fake.promotionGetByIDMutex.Unlock()
	fake.PromotionGetByIDStub = nil
	fake.promotionGetByIDReturns = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionGetByIDReturnsOnCall(i int, result1 types.Promotion, result2 error) {
	fake.promotionGetByIDMutex.Lock()
	defer fake.promotionGetByIDMutex.Unlock()
	fake.PromotionGetByIDStub = nil
	if fake.promotionGetByIDReturnsOnCall == nil {
		fake.promotionGetByIDReturnsOnCall = make(map[int]struct {
			result1 types.Promotion
			result2 error
		})
	}
	fake.promotionGetByIDReturnsOnCall[i] = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionGetByType(arg1 context.Context, arg2 types.PromotionType) (types.Promotion, error) {
	fake.promotionGetByTypeMutex.Lock()
	ret, specificReturn := fake.promotionGetByTypeReturnsOnCall[len(fake.promotionGetByTypeArgsForCall)]
	fake.promotionGetByTypeArgsForCall = append(fake.promotionGetByTypeArgsForCall, struct {
		arg1 context.Context
		arg2 types.PromotionType
	}{arg1, arg2})
	stub := fake.PromotionGetByTypeStub
	fakeReturns := fake.promotionGetByTypeReturns
	fake.recordInvocation("PromotionGetByType", []interface{}{arg1, arg2})
	fake.promotionGetByTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePromotionManager) PromotionGetByTypeCallCount() int {
	fake.promotionGetByTypeMutex.RLock()
	defer fake.promotionGetByTypeMutex.RUnlock()
	return len(fake.promotionGetByTypeArgsForCall)
}

func (fake *FakePromotionManager) PromotionGetByTypeCalls(stub func(context.Context, types.PromotionType) (types.Promotion, error)) {
	fake.promotionGetByTypeMutex.Lock()
	defer fake.promotionGetByTypeMutex.Unlock()
	fake.PromotionGetByTypeStub = stub
}

func (fake *FakePromotionManager) PromotionGetByTypeArgsForCall(i int) (context.Context, types.PromotionType) {
	fake.promotionGetByTypeMutex.RLock()
	defer fake.promotionGetByTypeMutex.RUnlock()
	argsForCall := fake.promotionGetByTypeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePromotionManager) PromotionGetByTypeReturns(result1 types.Promotion, result2 error) {
	fake.promotionGetByTypeMutex.Lock()
	defer fake.promotionGetByTypeMutex.Unlock()
	fake.PromotionGetByTypeStub = nil
	fake.promotionGetByTypeReturns = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionGetByTypeReturnsOnCall(i int, result1 types.Promotion, result2 error) {
	fake.promotionGetByTypeMutex.Lock()
	defer fake.promotionGetByTypeMutex.Unlock()
	fake.PromotionGetByTypeStub = nil
	if fake.promotionGetByTypeReturnsOnCall == nil {
		fake.promotionGetByTypeReturnsOnCall = make(map[int]struct {
			result1 types.Promotion
			result2 error
		})
	}
	fake.promotionGetByTypeReturnsOnCall[i] = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionUpdate(arg1 context.Context, arg2 types.Promotion) (types.Promotion, error) {
	fake.promotionUpdateMutex.Lock()
	ret, specificReturn := fake.promotionUpdateReturnsOnCall[len(fake.promotionUpdateArgsForCall)]
	fake.promotionUpdateArgsForCall = append(fake.promotionUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 types.Promotion
	}{arg1, arg2})
	stub := fake.PromotionUpdateStub
	fakeReturns := fake.promotionUpdateReturns
	fake.recordInvocation("PromotionUpdate", []interface{}{arg1, arg2})
	fake.promotionUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePromotionManager) PromotionUpdateCallCount() int {
	fake.promotionUpdateMutex.RLock()
	defer fake.promotionUpdateMutex.RUnlock()
	return len(fake.promotionUpdateArgsForCall)
}

func (fake *FakePromotionManager) PromotionUpdateCalls(stub func(context.Context, types.Promotion) (types.Promotion, error)) {
	fake.promotionUpdateMutex.Lock()
	defer fake.promotionUpdateMutex.Unlock()
	fake.PromotionUpdateStub = stub
}

func (fake *FakePromotionManager) PromotionUpdateArgsForCall(i int) (context.Context, types.Promotion) {
	fake.promotionUpdateMutex.RLock()
	defer fake.promotionUpdateMutex.RUnlock()
	argsForCall := fake.promotionUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePromotionManager) PromotionUpdateReturns(result1 types.Promotion, result2 error) {
	fake.promotionUpdateMutex.Lock()
	defer fake.promotionUpdateMutex.Unlock()
	fake.PromotionUpdateStub = nil
	fake.promotionUpdateReturns = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) PromotionUpdateReturnsOnCall(i int, result1 types.Promotion, result2 error) {
	fake.promotionUpdateMutex.Lock()
	defer fake.promotionUpdateMutex.Unlock()
	fake.PromotionUpdateStub = nil
	if fake.promotionUpdateReturnsOnCall == nil {
		fake.promotionUpdateReturnsOnCall = make(map[int]struct {
			result1 types.Promotion
			result2 error
		})
	}
	fake.promotionUpdateReturnsOnCall[i] = struct {
		result1 types.Promotion
		result2 error
	}{result1, result2}
}

func (fake *FakePromotionManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPromotionsMutex.RLock()
	defer fake.getPromotionsMutex.RUnlock()
	fake.promotionCreateMutex.RLock()
	defer fake.promotionCreateMutex.RUnlock()
	fake.promotionDeleteMutex.RLock()
	defer fake.promotionDeleteMutex.RUnlock()
	fake.promotionGetByIDMutex.RLock()
	defer fake.promotionGetByIDMutex.RUnlock()
	fake.promotionGetByTypeMutex.RLock()
	defer fake.promotionGetByTypeMutex.RUnlock()
	fake.promotionUpdateMutex.RLock()
	defer fake.promotionUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePromotionManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.PromotionManager = new(FakePromotionManager)
